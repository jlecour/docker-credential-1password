#!/bin/bash
# NAME
#   docker-credential-1password - docker credential helper for 1 password
# 
# DESCRIPTION
#   Implements the docker credential command line interface. The utility
#   will store all credentials in the 1password 'Docker' vault. If the
#   vault does not exist, it will be created.
#   
#   store - store the credential as API Credential in the Docker vault.
#           Creates the Docker vault if it does not exist.
#   get   - gets the credential from the Docker vault by title.
#   list  - lists all credentials and user names in the Docker vault.
#   erase - removes the credential from the Docker vault.
#
# PREREQUISITES
#  jq and 1password cli installed.
#
# ENVIRONMENT
#  DOCKER_CREDENTIAL_1PASSWORD_VAULT - name of the 1password vault to use, default Docker

# If expansion is attempted on an unset variable or parameter, the shell prints an
# error message, and, if not interactive, exits with a non-zero status.
set -o nounset
# The pipeline's return status is the value of the last (rightmost) command
# to exit with a non-zero status, or zero if all commands exit successfully.
set -o pipefail
# Enable trace mode if called with environment variable TRACE=1
if [[ "${TRACE-0}" == "1" ]]; then
    set -o xtrace
fi

DOCKER_CREDENTIAL_1PASSWORD_VAULT=${DOCKER_CREDENTIAL_1PASSWORD_VAULT:-Docker}
readonly DOCKER_CREDENTIAL_1PASSWORD_VAULT

function get_docker_vault_ids  {
	"${OP_BIN}" vault list --format json  | \
	"${JQ_BIN}" --arg vault "${DOCKER_CREDENTIAL_1PASSWORD_VAULT}" --raw-output 'map(select(.name == $vault) | .id)|.[]'
}

function get_vault_id  {
	result=($(get_docker_vault_ids))

	case ${#result[@]} in
		1)
			echo "${result}"
			;;
		0)
			return 1
			;;
		*)
			echo "ERROR: multiple '${DOCKER_CREDENTIAL_1PASSWORD_VAULT}' vaults found in 1Password" >&2
			return 2;;
	esac
}

function get {
	registry=$(</dev/stdin)
	vault_id=$(get_vault_id)
	[[ -z "${vault_id}" ]] && return 0
	credentials=$("${OP_BIN}" item get "$registry" \
                --vault "${DOCKER_CREDENTIAL_1PASSWORD_VAULT}" --format json 2>/dev/null)

  	[[ -z ${credentials} ]] && return 1

  	"${JQ_BIN}" --arg registry "${registry}" '{
		ServerURL: $registry, 
		Username: (.fields|map(select(.id == "username")|.value)|.[0]), 
		Secret: (.fields|map(select(.id == "credential")|.value).[0])
        }' <<< "${credentials}"
}

function erase {
  registry=$(</dev/stdin)
  vault_id=$(get_vault_id)
  [[ -z "${vault_id}" ]] && return 0

  item=$("${OP_BIN}" item get "${registry}" --vault "${DOCKER_CREDENTIAL_1PASSWORD_VAULT}" --format json 2> /dev/null)
  if [[ -n "${item}" ]]; then
	  "${OP_BIN}" item delete $("${JQ_BIN}" --raw-output .id <<< $item) --vault "${DOCKER_CREDENTIAL_1PASSWORD_VAULT}" > /dev/null
  fi
}

function list {
	vault_id=$(get_vault_id)
	exit_code=$?
	if [[ -z "${vault_id}" ]] && [[ "${exit_code}" -eq 1 ]]; then
		echo '{}'
		return
	elif [[ -z "${vault_id}" ]]; then
		return 1
	fi
	[[ -z "${vault_id}" ]] && return 0
	"${OP_BIN}" item  list --vault "${DOCKER_CREDENTIAL_1PASSWORD_VAULT}" --format json  | \
		"${JQ_BIN}" --raw-output 'map(.id)|.[]' | \
	while read id; do
		"${OP_BIN}" item get "${id}" --format json | \
		"${JQ_BIN}" '{(.title | sub("^";"https://")): (.fields|map(select(.id == "username")|.value)|.[0]) }'
	done | "${JQ_BIN}" --raw-output --slurp add | "${JQ_BIN}" --raw-output 'if(.!=null) then . else {} end'
}

function store {
    body=$(</dev/stdin)
	url=$("${JQ_BIN}" --raw-output '.ServerURL' <<< "${body}")
	username=$("${JQ_BIN}" --raw-output '.Username' <<< "${body}")
	credential=$("${JQ_BIN}" --raw-output '.Secret' <<< "${body}")

	vault_id=$(get_vault_id)
	exit_code=$?
	if [[ -z "${vault_id}" ]] && [[ "${exit_code}" == 1 ]]; then
		vault_id=$("${OP_BIN}" vault create --format json "${DOCKER_CREDENTIAL_1PASSWORD_VAULT}"  </dev/null | "${JQ_BIN}" --raw-output .ID)
		[[ -z "${vault_id}" ]] && echo "ERROR: failed to create Vault '${DOCKER_CREDENTIAL_1PASSWORD_VAULT}'">&2  && exit 1
  	elif [[ -z "${vault_id}" ]]; then
		exit 1
	fi

	items=($("${OP_BIN}" item list --vault "${DOCKER_CREDENTIAL_1PASSWORD_VAULT}" --format json | \
	        "${JQ_BIN}" --raw-output --arg title "${url}" "map(select(.title == $title)|.id)|.[]"))
	if [[ ${#items[@]} -eq 0 ]]; then
		"${OP_BIN}" item create --format json \
		--title "${url}" --category "API Credential" \
		--vault "${DOCKER_CREDENTIAL_1PASSWORD_VAULT}" -- \
		"username=${username}" \
		"credential=${credential}" \
		"valid from=$(date +%s)" \
		"expires=2147483647" \
		</dev/null >/dev/null
	else
		"${OP_BIN}" item edit --format json \
		    "${items[0]}" \
		    --vault "${DOCKER_CREDENTIAL_1PASSWORD_VAULT}" -- \
		    "username=${username}" \
            "credential=${credential}" \
            "valid from=$(date +%s)" \
            "expires=2147483647" \
            </dev/null >/dev/null
	fi
}

function usage {
	echo "Usage: docker-credential-1password [get|list|store|erase]" >&2
	echo "$@" >&2
	exit 1
}

function main {
	
	JQ_BIN=$(command -v jq)
	readonly JQ_BIN
	if [[ -z "${JQ_BIN}" ]]; then
		usage "missing jq on PATH"
	fi
	OP_BIN=$(command -v op)
	readonly OP_BIN
	if [[ -z "${OP_BIN}" ]]; then
		usage "missing 1password CLI (op) on PATH"
	fi

	case $1 in
		list|get|store|erase)
			eval $1
			;;
		*)
			usage "unknown option $1"
			;;
	esac
}

main "$@"
